package io.vrap.rmf.codegen.common.generator.model.jodabeans;

import org.joda.beans.*;
import org.joda.beans.gen.BeanDefinition;
import org.joda.beans.gen.PropertyDefinition;

import java.util.Date;
import java.util.Map;

import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;
import java.util.NoSuchElementException;
import org.joda.beans.Bean;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaBean;
import org.joda.beans.MetaProperty;
import org.joda.beans.impl.direct.DirectFieldsBeanBuilder;

@BeanDefinition
public final class UserAccount implements ImmutableBean {

    /** The user identifier. */
    @PropertyDefinition(validate = "notEmpty")
    private final String userId;

    /** The email address. */
    @PropertyDefinition(validate = "notEmpty")
    private final String emailAddress;

    /** The number of logins. */
    @PropertyDefinition
    private final int numberLogins;

    /** The last login instant. */
    @PropertyDefinition(validate = "notNull")
    private final Date lastLogin;

    //------------------------- AUTOGENERATED START -------------------------
    /**
     * The meta-bean for {@code UserAccount}.
     * @return the meta-bean, not null
     */
    public static UserAccount.Meta meta() {
        return UserAccount.Meta.INSTANCE;
    }

    static {
        MetaBean.register(UserAccount.Meta.INSTANCE);
    }

    /**
     * Returns a builder used to create an instance of the bean.
     * @return the builder, not null
     */
    public static UserAccount.Builder builder() {
        return new UserAccount.Builder();
    }

    private UserAccount(
            String userId,
            String emailAddress,
            int numberLogins,
            Date lastLogin) {
        JodaBeanUtils.notEmpty(userId, "userId");
        JodaBeanUtils.notEmpty(emailAddress, "emailAddress");
        JodaBeanUtils.notNull(lastLogin, "lastLogin");
        this.userId = userId;
        this.emailAddress = emailAddress;
        this.numberLogins = numberLogins;
        this.lastLogin = (Date) lastLogin.clone();
    }

    @Override
    public UserAccount.Meta metaBean() {
        return UserAccount.Meta.INSTANCE;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the user identifier.
     * @return the value of the property, not empty
     */
    public String getUserId() {
        return userId;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the email address.
     * @return the value of the property, not empty
     */
    public String getEmailAddress() {
        return emailAddress;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the number of logins.
     * @return the value of the property
     */
    public int getNumberLogins() {
        return numberLogins;
    }

    //-----------------------------------------------------------------------
    /**
     * Gets the last login instant.
     * @return the value of the property, not null
     */
    public Date getLastLogin() {
        return (Date) lastLogin.clone();
    }

    //-----------------------------------------------------------------------
    /**
     * Returns a builder that allows this bean to be mutated.
     * @return the mutable builder, not null
     */
    public Builder toBuilder() {
        return new Builder(this);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
        if (obj != null && obj.getClass() == this.getClass()) {
            UserAccount other = (UserAccount) obj;
            return JodaBeanUtils.equal(userId, other.userId) &&
                    JodaBeanUtils.equal(emailAddress, other.emailAddress) &&
                    (numberLogins == other.numberLogins) &&
                    JodaBeanUtils.equal(lastLogin, other.lastLogin);
        }
        return false;
    }

    @Override
    public int hashCode() {
        int hash = getClass().hashCode();
        hash = hash * 31 + JodaBeanUtils.hashCode(userId);
        hash = hash * 31 + JodaBeanUtils.hashCode(emailAddress);
        hash = hash * 31 + JodaBeanUtils.hashCode(numberLogins);
        hash = hash * 31 + JodaBeanUtils.hashCode(lastLogin);
        return hash;
    }

    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder(160);
        buf.append("UserAccount{");
        buf.append("userId").append('=').append(userId).append(',').append(' ');
        buf.append("emailAddress").append('=').append(emailAddress).append(',').append(' ');
        buf.append("numberLogins").append('=').append(numberLogins).append(',').append(' ');
        buf.append("lastLogin").append('=').append(JodaBeanUtils.toString(lastLogin));
        buf.append('}');
        return buf.toString();
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-bean for {@code UserAccount}.
     */
    public static final class Meta extends DirectMetaBean {
        /**
         * The singleton instance of the meta-bean.
         */
        static final Meta INSTANCE = new Meta();

        /**
         * The meta-property for the {@code userId} property.
         */
        private final MetaProperty<String> userId = DirectMetaProperty.ofImmutable(
                this, "userId", UserAccount.class, String.class);
        /**
         * The meta-property for the {@code emailAddress} property.
         */
        private final MetaProperty<String> emailAddress = DirectMetaProperty.ofImmutable(
                this, "emailAddress", UserAccount.class, String.class);
        /**
         * The meta-property for the {@code numberLogins} property.
         */
        private final MetaProperty<Integer> numberLogins = DirectMetaProperty.ofImmutable(
                this, "numberLogins", UserAccount.class, Integer.TYPE);
        /**
         * The meta-property for the {@code lastLogin} property.
         */
        private final MetaProperty<Date> lastLogin = DirectMetaProperty.ofImmutable(
                this, "lastLogin", UserAccount.class, Date.class);
        /**
         * The meta-properties.
         */
        private final Map<String, MetaProperty<?>> metaPropertyMap$ = new DirectMetaPropertyMap(
                this, null,
                "userId",
                "emailAddress",
                "numberLogins",
                "lastLogin");

        /**
         * Restricted constructor.
         */
        private Meta() {
        }

        @Override
        protected MetaProperty<?> metaPropertyGet(String propertyName) {
            switch (propertyName.hashCode()) {
                case -836030906:  // userId
                    return userId;
                case -1070931784:  // emailAddress
                    return emailAddress;
                case 850160339:  // numberLogins
                    return numberLogins;
                case 1995610739:  // lastLogin
                    return lastLogin;
            }
            return super.metaPropertyGet(propertyName);
        }

        @Override
        public UserAccount.Builder builder() {
            return new UserAccount.Builder();
        }

        @Override
        public Class<? extends UserAccount> beanType() {
            return UserAccount.class;
        }

        @Override
        public Map<String, MetaProperty<?>> metaPropertyMap() {
            return metaPropertyMap$;
        }

        //-----------------------------------------------------------------------
        /**
         * The meta-property for the {@code userId} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> userId() {
            return userId;
        }

        /**
         * The meta-property for the {@code emailAddress} property.
         * @return the meta-property, not null
         */
        public MetaProperty<String> emailAddress() {
            return emailAddress;
        }

        /**
         * The meta-property for the {@code numberLogins} property.
         * @return the meta-property, not null
         */
        public MetaProperty<Integer> numberLogins() {
            return numberLogins;
        }

        /**
         * The meta-property for the {@code lastLogin} property.
         * @return the meta-property, not null
         */
        public MetaProperty<Date> lastLogin() {
            return lastLogin;
        }

        //-----------------------------------------------------------------------
        @Override
        protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
            switch (propertyName.hashCode()) {
                case -836030906:  // userId
                    return ((UserAccount) bean).getUserId();
                case -1070931784:  // emailAddress
                    return ((UserAccount) bean).getEmailAddress();
                case 850160339:  // numberLogins
                    return ((UserAccount) bean).getNumberLogins();
                case 1995610739:  // lastLogin
                    return ((UserAccount) bean).getLastLogin();
            }
            return super.propertyGet(bean, propertyName, quiet);
        }

        @Override
        protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
            metaProperty(propertyName);
            if (quiet) {
                return;
            }
            throw new UnsupportedOperationException("Property cannot be written: " + propertyName);
        }

    }

    //-----------------------------------------------------------------------
    /**
     * The bean-builder for {@code UserAccount}.
     */
    public static final class Builder extends DirectFieldsBeanBuilder<UserAccount> {

        private String userId;
        private String emailAddress;
        private int numberLogins;
        private Date lastLogin;

        /**
         * Restricted constructor.
         */
        private Builder() {
        }

        /**
         * Restricted copy constructor.
         * @param beanToCopy  the bean to copy from, not null
         */
        private Builder(UserAccount beanToCopy) {
            this.userId = beanToCopy.getUserId();
            this.emailAddress = beanToCopy.getEmailAddress();
            this.numberLogins = beanToCopy.getNumberLogins();
            this.lastLogin = (Date) beanToCopy.getLastLogin().clone();
        }

        //-----------------------------------------------------------------------
        @Override
        public Object get(String propertyName) {
            switch (propertyName.hashCode()) {
                case -836030906:  // userId
                    return userId;
                case -1070931784:  // emailAddress
                    return emailAddress;
                case 850160339:  // numberLogins
                    return numberLogins;
                case 1995610739:  // lastLogin
                    return lastLogin;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
        }

        @Override
        public Builder set(String propertyName, Object newValue) {
            switch (propertyName.hashCode()) {
                case -836030906:  // userId
                    this.userId = (String) newValue;
                    break;
                case -1070931784:  // emailAddress
                    this.emailAddress = (String) newValue;
                    break;
                case 850160339:  // numberLogins
                    this.numberLogins = (Integer) newValue;
                    break;
                case 1995610739:  // lastLogin
                    this.lastLogin = (Date) newValue;
                    break;
                default:
                    throw new NoSuchElementException("Unknown property: " + propertyName);
            }
            return this;
        }

        @Override
        public Builder set(MetaProperty<?> property, Object value) {
            super.set(property, value);
            return this;
        }

        @Override
        public UserAccount build() {
            return new UserAccount(
                    userId,
                    emailAddress,
                    numberLogins,
                    lastLogin);
        }

        //-----------------------------------------------------------------------
        /**
         * Sets the user identifier.
         * @param userId  the new value, not empty
         * @return this, for chaining, not null
         */
        public Builder userId(String userId) {
            JodaBeanUtils.notEmpty(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * Sets the email address.
         * @param emailAddress  the new value, not empty
         * @return this, for chaining, not null
         */
        public Builder emailAddress(String emailAddress) {
            JodaBeanUtils.notEmpty(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Sets the number of logins.
         * @param numberLogins  the new value
         * @return this, for chaining, not null
         */
        public Builder numberLogins(int numberLogins) {
            this.numberLogins = numberLogins;
            return this;
        }

        /**
         * Sets the last login instant.
         * @param lastLogin  the new value, not null
         * @return this, for chaining, not null
         */
        public Builder lastLogin(Date lastLogin) {
            JodaBeanUtils.notNull(lastLogin, "lastLogin");
            this.lastLogin = lastLogin;
            return this;
        }

        //-----------------------------------------------------------------------
        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder(160);
            buf.append("UserAccount.Builder{");
            buf.append("userId").append('=').append(JodaBeanUtils.toString(userId)).append(',').append(' ');
            buf.append("emailAddress").append('=').append(JodaBeanUtils.toString(emailAddress)).append(',').append(' ');
            buf.append("numberLogins").append('=').append(JodaBeanUtils.toString(numberLogins)).append(',').append(' ');
            buf.append("lastLogin").append('=').append(JodaBeanUtils.toString(lastLogin));
            buf.append('}');
            return buf.toString();
        }

    }

    //-------------------------- AUTOGENERATED END --------------------------
}
